require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/attribute_types", type: :request do
  before do
    AttributeTypesApi.instance.delete_all_attribute_types
  end

  # This should return the minimal set of attributes required to create a valid
  # AttributeType. As you add validations to AttributeType, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "Bigint",
      description: "Long-range integer."
    }
  }

  let(:invalid_attributes) {
    {
      name: "",
      description: "Long-range integer."
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      AttributeType.create! valid_attributes
      get attribute_types_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      attribute_type = AttributeType.create! valid_attributes
      get attribute_type_url(attribute_type)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_attribute_type_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      attribute_type = AttributeType.create! valid_attributes
      get edit_attribute_type_url(attribute_type)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new AttributeType" do
        expect {
          post attribute_types_url, params: { attribute_type: valid_attributes }
        }.to change(AttributeType, :count).by(1)
      end

      it "redirects to the created attribute_type" do
        post attribute_types_url, params: { attribute_type: valid_attributes }
        expect(response).to redirect_to(attribute_type_url(AttributeType.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new AttributeType" do
        expect {
          post attribute_types_url, params: { attribute_type: invalid_attributes }
        }.to change(AttributeType, :count).by(0)
      end


      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post attribute_types_url, params: { attribute_type: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "Float",
          description: "Inexact, variable-precision numeric type."
        }
      }

      it "updates the requested attribute_type" do
        attribute_type = AttributeType.create! valid_attributes
        patch attribute_type_url(attribute_type), params: { attribute_type: new_attributes }
        attribute_type.reload

        expect(attribute_type.name).to eq("Float")
        expect(attribute_type.description).to eq("Inexact, variable-precision numeric type.")
      end

      it "redirects to the attribute_type" do
        attribute_type = AttributeType.create! valid_attributes
        patch attribute_type_url(attribute_type), params: { attribute_type: new_attributes }
        attribute_type.reload
        expect(response).to redirect_to(attribute_type_url(attribute_type))
      end
    end

    context "with invalid parameters" do

      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        attribute_type = AttributeType.create! valid_attributes
        patch attribute_type_url(attribute_type), params: { attribute_type: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested attribute_type" do
      attribute_type = AttributeType.create! valid_attributes
      expect {
        delete attribute_type_url(attribute_type)
      }.to change(AttributeType, :count).by(-1)
    end

    it "redirects to the attribute_types list" do
      attribute_type = AttributeType.create! valid_attributes
      delete attribute_type_url(attribute_type)
      expect(response).to redirect_to(attribute_types_url)
    end
  end
end
