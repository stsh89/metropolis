# Attribute type model. It contains list of operations around single attribute type and it's collection.
#
# The purpose of the attribute type is to provide more context for the model attributes,
# specifically to map attribute to it's type.
#
# It is defined in ActiveModel fashion just to stick to Rails conventions.
class AttributeType
  include ActiveModel::API
  include ActiveModel::Validations

  # An optional hint about how the type is used or what it's intended for.
  # @return [String, nil]
  attr_accessor :description

  # Name that is unique within the list of all attribute types.
  # @return [String, nil]
  attr_accessor :name

  # Web identifier that is unique within the list of all attribute types.
  # It is [nil] only for object that was not saved via API.
  # @return [String, nil]
  attr_accessor :slug

  validates :name, presence: true

  # Get unique identifier of the attribute type.
  #
  # Conventional Rails method.
  #
  # @return [String, nil]
  def id
    @slug
  end

  # Returns true if the attribute type has a slug. Slug is generated by API.
  #
  # Conventional Rails method.
  #
  # @return [Boolean]
  def persisted?
    id.present?
  end

  # Make request to save attribute type via API.
  #
  # Conventional Rails method.
  #
  # @return [AttributeType, nil] the saved attribute type or nil
  def save
    return if invalid?

    attribute_type = AttributeTypesApi.instance.create_attribute_type(self)
    assign_attributes(slug: attribute_type.slug)
    self
  end

  # Update attribute type with some new values.
  #
  # Conventional Rails method.
  #
  # @param [Hash] opts to update attribute type.
  # @option opts [String] description
  # @option opts [String] name
  # @return [AttributeType]
  def update(opts)
    assign_attributes(opts)

    return if invalid?

    attribute_type = AttributeTypesApi.instance.update_attribute_type(self)
    assign_attributes(slug: attribute_type.slug)
    self
  end

  # Send request to remove attribute type.
  #
  # Conventional Rails method.
  #
  # @return [AttributeType]
  def destroy
    AttributeTypesApi.instance.delete_attribute_type(self)
  end

  # Conventional Rails method. Used for testing purposed only.
  #
  # @return [AttributeType]
  def reload
    attribute_type = AttributeType.find(id)
    @slug = attribute_type.slug
    @name = attribute_type.name
    @description = attribute_type.description

    self
  end

  class << self
    # List all attribute types.
    #
    # Conventional Rails method.
    #
    # @return [Array<AttributeType>]
    def all
      AttributeTypesApi.instance.list_attribute_types
    end

    # Find single attribute type by it's slug.
    #
    # Conventional Rails method.
    #
    # @param id [String] the slug of attribute type.
    # @return [AttributeType]
    def find(id)
      AttributeTypesApi.instance.get_attribute_type(id)
    end

    # Returns number of attribute types returned by API.
    #
    # Conventional Rails method. Used for testing purposed only.
    #
    # @return [Integer]
    def count
      all.size
    end

    # Returns last attribyte type from the list.
    #
    # Conventional Rails method. Used for testing purposed only.
    #
    # @return [AttributeType]
    def last
      all.last
    end

    # Create a new attribute type or raise an exception.
    #
    # Conventional Rails method. Used for testing purposed only.
    #
    # @param [Hash] opts to update attribute type.
    # @option opts [String] description
    # @option opts [String] name
    # @return [AttributeType]
    def create!(opts)
      attribute_type = AttributeType.new(opts).save

      unless attribute_type
        raise StandardError, "can't create attribute type with invalid attributes"
      end

      attribute_type
    end

    private

    # Convert attribute type that was returned via API into model.
    # @return [AttributeType]
    def from_proto(proto_attribute_type)
      AttributeType.new(
        description: proto_attribute_type.description,
        name: proto_attribute_type.name,
        slug: proto_attribute_type.slug,
      )
    end
  end
end
